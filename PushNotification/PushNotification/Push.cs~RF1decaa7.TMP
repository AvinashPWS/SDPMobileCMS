using PushSharp;
using PushSharp.Android;
using PushSharp.Apple;
using PushSharp.Core;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace PushNotification
{
    public partial class Push : Form
    {
        public Push()
        {
            InitializeComponent();
        }

        private void SendButton_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(MessageTexBox.Text.Trim()))
            {
                SendNotifications();
            }
            else
            {
                MessageBox.Show("Please enter a Notification Messsage");
            }
        }


        public void SendNotifications1()
        {

            //create the puchbroker object
            var push = new PushBroker();
            //Wire up the events for all the services that the broker registers
            push.OnNotificationSent += NotificationSent;
            push.OnChannelException += ChannelException;
            push.OnServiceException += ServiceException;
            push.OnNotificationFailed += NotificationFailed;
            push.OnDeviceSubscriptionExpired += DeviceSubscriptionExpired;
            push.OnDeviceSubscriptionChanged += DeviceSubscriptionChanged;
            push.OnChannelCreated += ChannelCreated;
            push.OnChannelDestroyed += ChannelDestroyed;

            var appleCert = Properties.Resources.SDP_CERTIFICATE_DEV;

            push.RegisterAppleService(new ApplePushChannelSettings(false, appleCert, ""));

            push.QueueNotification(new AppleNotification()
                                                   .ForDeviceToken(Convert.ToString("e3f506cb7bd07c7f92de1626002231f7e6392f49c6674501468c3c34b08e3059"))
                                                   .WithAlert(MessageTexBox.Text.Trim())
                                                   .WithBadge(1));

            push.RegisterGcmService(new GcmPushChannelSettings(Properties.Resources.GoogleAPIKey));

            //push.QueueNotification(new GcmNotification().ForDeviceRegistrationId("c9A3f-rBjyM:APA91bHhSAXzmkefLiC_XAwKQC8jed33kkidipiQNRvt0nNS9kojA3NJqvt1iU-B044olFsHLjvSsPE7KcmO5cWX5JZ3Uzh4zWvGXduIy7HFOJ_b9bgQ7tHxiGTXm3N0rKroCbka7pd1")
            //.WithJson("{\"alert\":\"" + MessageTexBox.Text.Trim() + "\",\"badge\":1,\"sound\":\"sound.caf\",\"imageURL\":\"http://saidattanj.org/images/banner24.png\"}"));

            //push.QueueNotification(new GcmNotification().ForDeviceRegistrationId("eX8Flff7ECI:APA91bE1jNAz3DD1LpILJ-_o_w9oCuHEwWXfYpA0nkL6tEdJZVOSvjwQoRQs0wqL8bDRnKoHj-jN0cRrHXRfho-Pp9qh2lLFuc9Xq97pK_3JxXDYqDFSLpwSlO-fL8KCEMyQZQeQ78ft")
            //.WithJson("{\"alert\":\"" + MessageTexBox.Text.Trim() + "\",\"badge\":1,\"sound\":\"sound.caf\",\"imageURL\":\"http://saidattanj.org/images/banner24.png\"}"));


            //push.QueueNotification(new GcmNotification().ForDeviceRegistrationId("cbEB0vhQOeE:APA91bHTnLEgbWMhjwrI-KYfDu7KD8bQnvq46p01kzsK-FuPBnFsbsdtWcLkCC3pbsYVB_zObcdHu6VtOYKGNLGwOQwNuS_fKSCjXpGi0BlUDUe9Eimoq8ngsh-adxjw8aa_iJ_RtMW-")
            //.WithJson("{\"alert\":\"" + MessageTexBox.Text.Trim() + "\",\"badge\":1,\"sound\":\"sound.caf\",\"imageURL\":\"http://saidattanj.org/images/banner24.png\"}"));


            push.StopAllServices(waitForQueuesToFinish: true);

            MessageBox.Show("Push Notifications sent successfully!!!");
        }

        public void SendNotifications()
        {

            //create the puchbroker object
            var push = new PushBroker();
            //Wire up the events for all the services that the broker registers
            push.OnNotificationSent += NotificationSent;
            push.OnChannelException += ChannelException;
            push.OnServiceException += ServiceException;
            push.OnNotificationFailed += NotificationFailed;
            push.OnDeviceSubscriptionExpired += DeviceSubscriptionExpired;
            push.OnDeviceSubscriptionChanged += DeviceSubscriptionChanged;
            push.OnChannelCreated += ChannelCreated;
            push.OnChannelDestroyed += ChannelDestroyed;

            try
            {

                string sRoles = "";
                for (int i = 0; i < RoleListBox.SelectedItems.Count; i++)
                {
                    sRoles += "ROLE LIKE '%" + RoleListBox.SelectedItems[i] + "%' OR ";
                }

                if (string.IsNullOrEmpty(sRoles))
                {
                    sRoles = "ROLE LIKE '%ALL%'";
                }
                else
                {
                    sRoles = sRoles + "OR";
                    sRoles = System.Text.RegularExpressions.Regex.Replace(sRoles, "OR OR", "");
                }

                var appleCert = Properties.Resources.SDP_CERTIFICATE_DEV;

                push.RegisterAppleService(new ApplePushChannelSettings(false, appleCert, ""));

                push.RegisterGcmService(new GcmPushChannelSettings(Properties.Resources.GoogleAPIKey));

                SqlConnection sConnection = new SqlConnection(Properties.Resources.SaiDatta);

                DataTable DeviceIDDataTable = new DataTable();

                sConnection.Open();

                string sSQL = "SELECT DEVICE_ID,DEVICE_TYPE FROM NOTIFICATION_DEVICES WHERE " + sRoles;

                SqlDataAdapter sAdapter = new SqlDataAdapter(sSQL, sConnection);
                sAdapter.Fill(DeviceIDDataTable);

                for (int i = 0; i < DeviceIDDataTable.Rows.Count; i++)
                {
                    if (Convert.ToString(DeviceIDDataTable.Rows[i]["DEVICE_TYPE"]).ToUpper().Trim() == "IOS")
                    {
                        push.QueueNotification(new AppleNotification()
                                                    .ForDeviceToken(Convert.ToString(DeviceIDDataTable.Rows[i]["DEVICE_ID"]))
                                                    .WithAlert(MessageTexBox.Text.Trim())
                                                    .WithBadge(1));
                    }
                    else
                    {
                        push.QueueNotification(new GcmNotification().ForDeviceRegistrationId(Convert.ToString(DeviceIDDataTable.Rows[i]["DEVICE_ID"]))
                         .WithJson("{\"alert\":\"" + MessageTexBox.Text.Trim() + "\",\"badge\":1,\"sound\":\"sound.caf\",\"imageURL\":\"http://saidattanj.org/images/banner24.png\"}"));
                    }
                }

                sConnection.Close();
            }
            catch (Exception ex)
            {

            }

            push.StopAllServices(waitForQueuesToFinish: true);

            MessageBox.Show("Push Notifications sent successfully!!!");
        }

        public void Sample()
        {

            ////create the puchbroker object
            //var push = new PushBroker();
            ////Wire up the events for all the services that the broker registers
            //push.OnNotificationSent += NotificationSent;
            //push.OnChannelException += ChannelException;
            //push.OnServiceException += ServiceException;
            //push.OnNotificationFailed += NotificationFailed;
            //push.OnDeviceSubscriptionExpired += DeviceSubscriptionExpired;
            //push.OnDeviceSubscriptionChanged += DeviceSubscriptionChanged;
            //push.OnChannelCreated += ChannelCreated;
            //push.OnChannelDestroyed += ChannelDestroyed;

            //try
            //{
            //    var appleCert = Properties.Resources.FGAppCertificateTEST;
            //    //IMPORTANT: If you are using a Development provisioning Profile, you must use
            //    // the Sandbox push notification server 
            //    //  (so you would leave the first arg in the ctor of ApplePushChannelSettings as
            //    // 'false')
            //    //  If you are using an AdHoc or AppStore provisioning profile, you must use the 
            //    //Production push notification server
            //    //  (so you would change the first arg in the ctor of ApplePushChannelSettings to 
            //    //'true')
            //    push.RegisterAppleService(new ApplePushChannelSettings(true, appleCert, "monsanto"));
            //    //Extension method
            //    //Fluent construction of an iOS notification
            //    //IMPORTANT: For iOS you MUST MUST MUST use your own DeviceToken here that gets
            //    // generated within your iOS app itself when the Application Delegate
            //    //  for registered for remote notifications is called, 
            //    // and the device token is passed back to you
            //    push.QueueNotification(new AppleNotification()
            //                                .ForDeviceToken("75e082e97cc16169674595924a5357d0c8bb7af83a26ec39dbb3176285757bbb")//the recipient device id
            //                                .WithAlert("Push Notification from ASP.NET")//the message
            //                                .WithBadge(1)
            //        //.WithSound("sound.caf")
            //                                );


            //}
            //catch (Exception ex)
            //{
            //    throw ex;
            //}


            //try
            //{
            //    //---------------------------
            //    // ANDROID GCM NOTIFICATIONS
            //    //---------------------------
            //    //Configure and start Android GCM
            //    //IMPORTANT: The API KEY comes from your Google APIs Console App, 
            //    //under the API Access section, 
            //    //  by choosing 'Create new Server key...'
            //    //  You must ensure the 'Google Cloud Messaging for Android' service is 
            //    //enabled in your APIs Console
            //    //push.RegisterGcmService(new
            //    // GcmPushChannelSettings("YOUR Google API's Console API Access  API KEY for Server Apps HERE"));
            //    ////Fluent construction of an Android GCM Notification
            //    ////IMPORTANT: For Android you MUST use your own RegistrationId 
            //    ////here that gets generated within your Android app itself!
            //    //push.QueueNotification(new GcmNotification().ForDeviceRegistrationId("DEVICE REGISTRATION ID HERE")
            //    // .WithJson("{\"alert\":\"Hello World!\",\"badge\":7,\"sound\":\"sound.caf\"}"));
            //}
            //catch (Exception ex) { }

            //push.StopAllServices(waitForQueuesToFinish: true);

        }

        //Currently it will raise only for android devices
        static void DeviceSubscriptionChanged(object sender,
        string oldSubscriptionId, string newSubscriptionId, INotification notification)
        {
            //Do something here
        }

        //this even raised when a notification is successfully sent
        static void NotificationSent(object sender, INotification notification)
        {
            //Do something here
        }

        //this is raised when a notification is failed due to some reason
        static void NotificationFailed(object sender,
        INotification notification, Exception notificationFailureException)
        {
            //Do something here

            //delete the device id from DB
        }

        //this is fired when there is exception is raised by the channel
        static void ChannelException
            (object sender, IPushChannel channel, Exception exception)
        {
            //Do something here
        }

        //this is fired when there is exception is raised by the service
        static void ServiceException(object sender, Exception exception)
        {
            //Do something here
        }

        //this is raised when the particular device subscription is expired
        static void DeviceSubscriptionExpired(object sender,
        string expiredDeviceSubscriptionId,
            DateTime timestamp, INotification notification)
        {
            //Do something here
        }

        //this is raised when the channel is destroyed
        static void ChannelDestroyed(object sender)
        {
            //Do something here
        }

        //this is raised when the channel is created
        static void ChannelCreated(object sender, IPushChannel pushChannel)
        {
            //Do something here
        }

        private void ResetButton_Click(object sender, EventArgs e)
        {
            MessageTexBox.Text = "";
            RoleListBox.SelectedItems.Clear();
        }

    }
}
